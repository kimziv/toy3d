#summary Details of classes and members.

= sample code =

画四边形 rectangle.


{{{

#define WINDOW_W   800
#define WINDOW_H   480


Real vertices[18] = {
   1.0, 1.0, 1.0,
   ...
   ...
};

#define VERTEX_COUNT 6


World *world = NULL;




void init ()
{

   world = new World ();


   //camera...
   Camera *camera = world->createCamera ("camera1");
   camera->lookAt (0.0, 0,0, 1.0, 0.0, 0,0, 0.0, 0.0, 1.0, 0.0);
   camera->perspective (45.0, WINDOW_W/WINDOW_H, 1.0, 1000.0);



   //shader...

   ShaderProgram *shaderProgram = world->createShaderProgram();
   shaderProgram->loadShaderSource ("rect.vert", "rect.frag");

   ShaderProgramParameters *params = new ShaderProgramParameters ();
   paras->setNamedAutoConstant ("projMat", AutoConstantType::TOY3D_ACT_PROJECTION_MATRIX);

   params->setNamedAutoConstant ("viewMat",AutoConstantType::TOY3D_ACT_VIEW_MATRIX);

   params->setNamedAutoConstant ("worldMat",AutoConstantType::TOY3D_ACT_WORLD_MATRIX);
   
    
   shaderProgram->bindShaderParameters(params);


   //mesh...
   Mesh *mesh = world->createMesh ();
   mesh->setVertices (vertices, VERTEX_COUNT);
   
}

void draw ()
{

    world->startRendering();
}


int main ()
{
    glutInit();
}


}}}


= Common =

{{{

typedef float Real;
typedef unsigned char Uchar;
typedef unsigned short Ushort;
typedef unsigned int Uint;
typedef unsigned long Ulong;

typedef signed int Sint;



}}}

= World =

{{{

class World 
{
    void startRendering();
};

void World::startRendering ()
{
}


void World::startRendering ()
{
   //create AutoParamDataSource
   AutoParamDataSource *source = new AutoParamDataSource ();
   source->setProjectionMatrix();
   source->setViewMatrix ();
   
   //update auto shader paramters
   mShaderProgram->getParameters()->updateAutoParams (source);
   delete source; 



    for (int i = 0; i < mMeshCount; i++){
        mRenderer.render(&mMesh[i]);
    }



    
}

}}}


= Mesh =

{{{

class Mesh 
{
private:

    Real *mVertices;

public:
    Mesh();
    ~Mesh()

    void setVertices (Real* vertices, uint count);
 
};

//count: vertex count
void Mesh::setVertices (Real* vertices, int count)
{
    if (mVertices)
        free (mVertices);

    mVertices = (Real*)malloc (count * 3 * sizeof (Real));
    memcpy (mVertices, vertices);
    
}



}}}

= Shader Program =


{{{

enum AutoConstantType
{
   TOY3D_ACT_WORLD_MATRIX,
   TOY3D_ACT_VIEW_MATRIX,
   TOY3D_ACT_PROJECTION_MATRIX, 
}


}}}


Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages