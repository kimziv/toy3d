#summary Details of classes and members.

= sample code =

画四边形 rectangle.


{{{

#define WINDOW_W   800
#define WINDOW_H   480


World *world = NULL;




void init ()
{

   world = new World ();


   //camera...
   Camera *camera = world->createCamera ("camera1");
   camera->lookAt (0.0, 0,0, 1.0, 0.0, 0,0, 0.0, 0.0, 1.0, 0.0);
   camera->perspective (45.0, WINDOW_W/WINDOW_H, 1.0, 1000.0);



   //shader...

   ShaderProgram *shaderProgram = world->createShaderProgram();
   shaderProgram->loadShaderSource ("rect.vert", "rect.frag");

   ShaderProgramParameters *params = new ShaderProgramParameters ();
   paras->setNamedAutoConstant ("projMat", AutoConstantType::TOY3D_ACT_PROJECTION_MATRIX);

   params->setNamedAutoConstant ("viewMat",AutoConstantType::TOY3D_ACT_VIEW_MATRIX);

   params->setNamedAutoConstant ("worldMat",AutoConstantType::TOY3D_ACT_WORLD_MATRIX);
   
    
   shaderProgram->bindShaderParameters(params);


   //mesh...
   
      
   
}

void draw ()
{
}


int main ()
{
    glutInit();
}


}}}


= Common =

{{{

typedef float Real;

typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;



}}}

= World =

{{{

class World 
{
    void startRendering();
};

void World::startRendering ()
{
    for (all mesh){
        renderSystem->_render (mesh);
    }
}

}}}


{{{

void World::startRendering ()
{
   //create AutoParamDataSource
   AutoParamDataSource *source = new AutoParamDataSource ();
   source->setProjectionMatrix();
   source->setViewMatrix ();
   
   //update auto shader paramters
   mShaderProgram->getParameters()->updateAutoParams (source);
   delete source; 


   //create Render operation
   RenderOperation *ro = new RenderOperation ();
   ro->setVertices (...);
      
   //draw scene
   mRenderer->render(ro);
   delete ro; 
    
}

}}}


= Mesh =

{{{

class Mesh 
{
private:

    Real *mVertices;

public:
    Mesh();
    ~Mesh()

    void setVertices (Real* vertices, int num);
    RenderData *getRenderData ();
};

void Mesh::setVertices (Real* vertices, int num)
{
    if (mVertices)
        free (mVertices);

    mVertices = (Real*)malloc (num * 3 * sizeof (Real));
    memcpy (mVertices, vertices);
    
}

RenderData* Mesh::getRenderData ()
{
}


}}}

= Shader Program =


{{{

enum AutoConstantType
{
   TOY3D_ACT_WORLD_MATRIX,
   TOY3D_ACT_VIEW_MATRIX,
   TOY3D_ACT_PROJECTION_MATRIX, 
}


}}}


Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages