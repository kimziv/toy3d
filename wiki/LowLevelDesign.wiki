#summary Details of classes and members.

= sample code =

画四边形 rectangle.


{{

World *world = NULL;

void init ()
{

   world = new World ();


   ShaderProgram *shaderProgram = world->createShaderProgram();
   shaderProgram->loadShaderSource ("rect.vert", "rect.frag");

   ShaderProgramParameters *paras = new ShaderProgramParameters ();
   paras->setNamedAutoConstant ("prjMat", );
   paras->setNamedAutoConstant ("viewMat",AutoConstantTyep::T3D_VEW_MAT);
   
 
   shaderProgram->bindProgramParameters(paras);
   
}

void draw ()
{
}


int main ()
{
    glutInit();
}


}}}

= Shader Program =





= Common =

{{{

typedef float Real;

typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;



}}}

= World =

{{{

class World 
{
    void startRendering();
};

void World::startRendering ()
{
    for (all mesh){
        renderSystem->_render (mesh);
    }
}

}}}


= Mesh =

{{{

class Mesh 
{
private:

    Real *mVertices;

public:
    Mesh();
    ~Mesh()

    void setVertices (Real* vertices, int num);
    RenderData *getRenderData ();
};

void Mesh::setVertices (Real* vertices, int num)
{
    if (mVertices)
        free (mVertices);

    mVertices = (Real*)malloc (num * 3 * sizeof (Real));
    memcpy (mVertices, vertices);
    
}

RenderData* Mesh::getRenderData ()
{
}


}}}

= Shader Program =

{{{

void World::startRendering ()
{
   //create AutoParamDataSource
   AutoParamDataSource *source = new AutoParamDataSource ();
   source->setProjectionMatrix();
   source->setViewMatrix ();
   
   //update auto shader paramters
   mShaderProgram->getParameters()->updateAutoParams (source);
   delete source; 


   //create Render operation
   RenderOperation *ro = new RenderOperation ();
   ro->setVertices (...);
      
   //draw scene
   mRenderer->render(ro);
   delete ro; 
    
}

}}}

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages