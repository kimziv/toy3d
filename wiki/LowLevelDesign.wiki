#summary Details of classes and members.

= sample code =

Add your content here.

{{{

void init ()
{
   ShaderProgramParameters *paras = new ShaderProgramParameters ();
   paras->setNamedAutoConstant ("prjMat", AutoConstantType::T3D_PROJ_MAT);
   paras->setNamedAutoConstant ("viewMat",AutoConstantTyep::T3D_VEW_MAT);
   
   ShaderProgram *shaderProgram = world->createShaderProgram();
 
   shaderProgram->bindProgramParameters(paras);
   
}

}}}

= Mesh =

{{{

class Mesh 
{
private:

    Real *mVertices;

public:
    Mesh();
    ~Mesh()

    void setVertices (Real* vertices, int num);
    RenderData *getRenderData ();
};

void Mesh::setVertices (Real* vertices, int num)
{
    if (mVertices)
        free (mVertices);

    mVertices = (Real*)malloc (num * 3 * sizeof (Real));
    memcpy (mVertices, vertices);
    
}

RenderData* Mesh::getRenderData ()
{
}


}}}

= Shader Program =

{{{

void World::startRendering ()
{
   //create AutoParamDataSource
   AutoParamDataSource *source = new AutoParamDataSource ();
   source->setProjectionMatrix();
   source->setViewMatrix ();
   
   //update auto shader paramters
   mShaderProgram->getParameters()->updateAutoParams (source);
   delete source; 


   //create Render operation
   RenderOperation *ro = new RenderOperation ();
   ro->setVertices (...);
      
   //draw scene
   mRenderer->render(ro);
   delete ro; 
    
}

}}}

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages