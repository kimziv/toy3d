#summary One-sentence summary of this page.

= Introduction =

增加 alpha 混合支持


= 使用样例 =

{{{

    Material *mat = MaterialManager::getInstance()->createMaterial();
    ...
    mat->setSceneBlending(T3D_BLEND_SRC_ALPHA, BLEND_ONE_MINUS_SRC_ALPHA);

}}}

= 设计 =

{{{
    enum BlendingFactor
    {
        /* Blending Factor Dest */
        T3D_ZERO,
        T3D_ONE,
        T3D_SRC_COLOR,
        T3D_ONE_MINUS_SRC_COLOR,
        T3D_SRC_ALPHA,
        T3D_ONE_MINUS_SRC_ALPHA,
        T3D_DST_ALPHA,
        T3D_ONE_MINUS_DST_ALPHA,

        /* Blending Factor Src */
        /* T3D_ZERO */
        /* T3D_ONE */
        T3D_DST_COLOR,
        T3D_ONE_MINUS_DST_COLOR,
        T3D_SRC_ALPHA_SATURATE,
        /* T3D_SRC_ALPHA */
        /* T3D_ONE_MINUS_SRC_ALPHA */
        /* T3D_DST_ALPHA */
        /* T3D_ONE_MINUS_DST_ALPHA */
    };
    
    enum BlendingMode
    {
        T3D_ADD,
        T3D_SUBTRACT,
        T3D_SUBTRACT_REVERSE,
        T3D_MIN,
        T3D_MAX
    };

    /*
    typedef struct _BlendingInfo
    {
        BlendingFactor srcFactor;
        BlendingFactor destFactor;
        BlendingMode   mode;
    }BlendingInfo
    */

class Material {
    Material()
    {
        ...
        mAlphaBlending = FALSE;
    }

    bool mAlphaBlending;     /* default value : false */
    //BlendingInfo mBlendingInfo;
    BlendingFactor mSrcFactor;
    BlendingFactor mDestFactor;
    BlendingMode   mMode;


    void setSceneBlending(BlendingFactor srcFactor, BlendingFactor destFactor, BlendingMode mode = T3D_ADD);
    //BlendingInfo* getBlendingInfo();
    const BlendingFactor getSrcBlendFactor() const;
    const BlendingFactor getDestBlendFactor() const;
    const BlendingMode getBlendMode() const;
};

void Material::void setSceneBlending(BlendingFactor srcFactor, BlendingFactor destFactor, BlendingMode mode)
{
    mSrcFactor = srcFactor;
    mDestFactor = destFactor;
    mMode = mode;

    mAlphaBlending = TRUE;

    return;
}

const Bool Material::hasAlphaBlending() const
{
    return (const Bool)mAlphaBlending;
}

const BlendingFactor Material::getSrcBlendFactor() const
{
    return (const BlendingFactor)mSrcFactor;
}

const BlendingFactor Material::getDestBlendFactor() const
{
    return (const BlendingFactor)mDestFactor;
}

const BlendingMode Material::getBlendMode() const
{
    return (const BlendingMode)mMode;
}


class Renderer
{
    void enableBlending (bool flag);
    //void setSceneBlending(BlendingInfo blendingInfo);
    void setSceneBlending(BlendingFactor srcFactor,BlendingFactor destFactor, BlendingMode mode);
}

void Renderer::enableBlending (bool flag)
{
    if(flag)
        glEnable(GL_BLEND);
    else
        glDisable(GL_BLEND);

    return;
}

//void Renderer::setSceneBlending(src, dst, op)
//{
//   gl...
//}
void Renderer::setSceneBlending(BlendingFactor t3dSrcFactor, BlendingFactor t3dDestFactor, BlendingMode t3dMode)
{
    int srcFactor, destFactor, mode;

    switch(t3dSrcFactor)
    {
    case T3D_ZERO:
        srcFactor = GL_ZERO;
        break;
    }

    switch(t3dDestFactor)
    {
    case T3D_ZERO:
        destFactor = GL_ZERO;
        break;
    }

    switch(t3dMode)
    {
    case T3D_ADD:
        mode = GL_ADD;
        break;
    }

    glBlendFunc(srcFactor, destFactor);
    glBlendEquation(mode);

    return;
}


void World::renderSingleObject (RenderOperation *ro, Material *mat, Real worldMatrix[16], Real viewMatrix[16], Real projMatrix[16])
{
    if (mat->hasAlphaBlending()){
        mRenderer.enableBlending(TRUE);
        //绘制之后如何清除？
        mRenderer.setSceneBlending(mat->getSourceBlendFactor(),
                                   mat->getDestBlendFactor(),
                                   mat->getBlendMode()
                                   );
    }

    mRenderer.render(op);

    if (mat->hasAlphaBlending())
        mRenderer.enableBlending(FALSE);
        //mRenderer.disableBlending ();
}




}}}

=Reference=

 * [http://www.cnitblog.com/buf/archive/2011/07/27/74877.html OGRE Texture Blending 纹理混合]  3张图3个 texture unit