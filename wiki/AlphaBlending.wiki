#summary One-sentence summary of this page.

= Introduction =

增加 alpha 混合支持


= 使用样例 =

{{{

    Material *mat = MaterialManager::getInstance()->createMaterial();
    ...
    mat->setSceneBlending(T3D_BLEND_SRC_ALPHA, BLEND_ONE_MINUS_SRC_ALPHA);

}}}

= 设计 =

{{{
    enum BlendingFactor
    {
        ...
        T3D_
    }

    enum BlendingMode
    {
        ...
        T3D_
    };

    typedef struct _BlendingInfo
    {
        BlendingFactor srcFactor;
        BlendingFactor dstFactor;
        BlendingMode   mode;
    }BlendingInfo;

class Material {
    Material()
    {
        ...
        mAlphaBlending = FALSE;
    }

    bool mAlphaBlending;     /* default value : false */
    BlendingInfo mBlendingInfo;

    void setSceneBlending(BlendingFactor srcFactor, BlendingFactor destFactor, BlendingMode mode = BLEND_ADD);
    BlendingInfo* getBlendingInfo();
};

void Material::void setSceneBlending(BlendingFactor srcFactor, BlendingFactor destFactor, BlendingMode mode)
{
    mSrcFactor = srcFactor;
    mDestFactor = destFactor;
    mMode = mode;

    mAlphaBlending = TRUE;

    return;
}

class Renderer
{
    void enableBlending (bool flag);
    void setSceneBlending(BlendingOp blendingOp);
}

void Renderer::enableBlending (bool flag)
{
    if(flag)
        glEnable(GL_BLEND);
    else
        glDisable(GL_BLEND);

    return;
}

//void Renderer::setSceneBlending(src, dst, op)
//{
//   gl...
//}
void Renderer::setSceneBlending(BlendingOp blending)
{
    int srcfactor, destfactor, mode;
    switch(blendingOp.srcFactor)
    {
        case xx:
            srcfactor = GL_...
            break;
        ...
    }
    switch(blendingOp.destFactor)
    {
        case xx:
            destfactor = GL_...
            break;
        ...
    }
    switch(blendingOp.mode)
    {
        case xx:
            mode = GL_...
            break;
        ...
    }

    glBlendFunc(srcfactor, destfactor);
    glBlendEquation(mode);

    return;
}



void World::renderSingleObject (RenderOperation *ro, Material *mat, Real worldMatrix[16], Real viewMatrix[16], Real projMatrix[16])
{
    if (mat->hasAlphaBlending()){
        //绘制之后如何清除？
        mRenderer.setSceneBlending(mat->getSourceBlenderFactor(),
                                   mat->getDestBlendFactor(),
                                   mat->getSceneBlendingOperation()
                                   );
    }

    mRenderer.render(op);

    if (mat->hasAlphaBlending())
        mRenderer.disableBlending ();
}




}}}

=Reference=

 * [http://www.cnitblog.com/buf/archive/2011/07/27/74877.html OGRE Texture Blending 纹理混合]  3张图3个 texture unit