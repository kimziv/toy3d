#summary 资源管理重构


=基本思想=

总体来说：
 * 资源包括： mesh, shaderprogram, texture
 * 资源存在对应 Manager 的列表中
 * 每种资源对应一种 manager

具体来说：
 * Mesh 可以由多个 Entity 共享
 * ShaderProgram 可以由多个 Entity 共享
 * Texture 可以由多个 Entity 共享
 * 所有的 Mesh 都经过 MeshManager 创建与释放，并实际保存在里边
 * 所有的 ShaderProgram 都经过 ShaderProgramManager 创建与释放，并实际保存在里边
 * 所有的 Texture 都经过 TextureManager 创建与释放，并实际保存在里边


=遗留问题=
 * 各个 manager 开发给用户还是包到 root 里
 * 设计一个通用list，取代指针数组
 * Resource父类、ResouceManager 父类


=MeshManager=

{{{

class MeshManager {

private:

   Mesh* mMeshes[MAX_MESH_COUNT];
   Uint mMeshCount;

public:

    Mesh* createMesh ();

    void destroyMesh(Mesh *mesh);
    void destroyAllMeshes ();

};




}}}


=ShaderProgramManager=

{{{

class ShaderProgramManager {

private:

   ShaderProgram *mShaderProgramParams[MAX_SHADER_PROGRAM_PARAMS_COUNT];
   int mShaderProgramParamsCount;

   ShaderProgram* mShaderPrograms[MAX_SHADER_PROGRAM_COUNT];
   Uint mShaderProgramCount;

public:

    ShaderProgram* createShaderProgam ();

    void destroyShaderProgram (ShaderProgram *prog);
    void destroyAllShaderProgram ();

};



}}}


=TextureManager=

{{{

class TextureManager {

private:

   Texture* mTextures[MAX_TEXTURE_COUNT];
   Uint mTextureCount;

public:

    Texture* createTexture (const char* filename);

    void destroyTexture (Texture *tex);
    void destroyAllTextures ();

};

}}}
 


 



= Reference =

  1. [http://www.opengpu.org/forum.php?mod=viewthread&tid=2737 你的引擎用不用stl boost？ 为什么？]


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages