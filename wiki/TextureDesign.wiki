#summary Texture Related modules

=资源管理策略=

= Texture =
{{{
enum TextureState {
    UNLOADED,
    LOADED,
    UNGENERATED,
    GENERATED
};

typdef sttuct _TextureParameter {
    TextureParameterName paraName;
    TextureParameterVal paraVal;
    TextureDataType dataType;
    PixelFormat format;
}TextureParameter;

class Texture {
private:
    int mT3DTexID;
    int mTexID;
    char *pFileName;
    ImageInfo *pImageInfo;
    TextureState mState;
    TextureParameter mParam;

public:
    void load();
    void unload();
    void generate();
    void delete(int texid);
    void setParameter(...);
}

}}}

= TextureManager =

TextureManager 设计成  Singleton

基本原则

类定义 TextureManager.h：

{{{

class TextureManager {

protected:
        static TextureManager* mInstance;

public:
        static TextureManager* getInstance();
        
        TextureManager();
        ~TextureManager();

};


}}}


类实现 TextureManager.cpp：

{{{

TextureManager* TextureManager::mInstance = NULL;

TextureManager* TextureManager::getInstance()
{

    if (NULL == mInstance)
        mInstance = new TextureManager();

    return mInstance;
}


TextureManager::TextureManager ()
{
}


TextureManager::~TextureManager ()
{
}


}}}

单件 TextureManager的使用：

{{{
    TextureManager::getInstance()->createTextureByFile("leaf.tga");
}}}


= 使用样例 =

{{{

void init ()

{
   //world,camera, shaderprogram
   ...
   //create texture
   Texture *texture = TextureManager::getInstance()->createTextureByFile("leaf.tga");

    //Create mesh and set texture id
    Mesh *mesh = world->createMesh();
    mesh->setVertices (vertices, VERTEX_COUNT);
    mesh->setRenderMode (TOY3D_TRIANGLE_STRIP);^M
    mesh->setTextureId (texture->getId());
      
}

}}}