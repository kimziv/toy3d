#summary 基础数据结构的设计


=指针数组=


==基本原则==
 * 数组元素是指针
 * 数组长度可动态增加
 * 支持各种数据类型，类似C++模板。


==动态变化策略==
数组增长：
当已分配长度不够时，重新分配内存，按照如下原则：
2^n


==类==

{{{
typedef void* TOY3D_PTR;

class Toy3DPtrArray {

protected:
    TOY3D_PTR *pData;
    Uint len; //数组中元素个数
    Uint allocLen;//最大允许元素个数

public:
    //create
    TOY3D_PTR_ARRAY* createPtrArray();
    TOY3D_PTR_ARRAY* createPtrArray(Uint size);

    //delete
    Bool removeElement(TOY3D_PTR *pData);
    TOY3D_PTR* removeElementByIndex(Uint index);
    void destroyPtrArray();

    //process
    Bool insert(TOY3D_PTR *pData, Uint index);
    Bool append(TOY3D_PTR *pData);
    void setSize(Uint length);
    void maybeExpand(Uint length);
    TOY3D_PTR* getElement(Uint index);

    //override operator []、=
};

}}}


==用户使用==

{{{

    //Sample code for Toy3DPtrArray

}}}

= Reference =

 * [http://developer.gnome.org/glib/2.34/ glib Manual]