#summary 基础数据结构的设计


==指针数组==
typedef void* TOY3D_PTR;

struct TOY3D_PTR_ARRAY
{
    TOY3D_PTR *pData;
    Uint len;
};
enum TOY3D_PTR_ARRAY_SORT_MODE
{
};


==基本原则==
 * 数组元素是指针
 * 数组长度可动态增加
 * 支持各种数据类型，类似C++模板。


==动态增长策略==


==类==

{{{
class Toy3DPtrArray {
protected:
    TOY3D_PTR_ARRAY *mPtrArray;

public:
    //create
    TOY3D_PTR_ARRAY* createPtrArray();
    TOY3D_PTR_ARRAY* createPtrArray(Uint size);

    //delete
    Bool removeElement(TOY3D_PTR pData);
    TOY3D_PTR* removeElementByIndex(Uint index);
    void destroyPtrArray();

    //process
    Bool addElement(TOY3D_PTR pData);
    void sort(TOY3D_PTR_ARRAY_SORT_MODE mode);
    void setSize(Uint length);
    void expand(Uint length);
    TOY3D_PTR* getElement(Uint index);
};

}}}


==用户使用==

{{{

    //Sample code for Toy3DPtrArray

}}}

= Reference =

 * [http://developer.gnome.org/glib/2.34/ glib Manual]