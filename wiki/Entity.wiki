#summary 增加entity.


＝ Entity Mesh ＝

{{{

class Mesh {

private:
    RenderMode mRenderMode;
    Real *mVertices;^M
    Real* mColors;^M
    Real* mUVs;^M
    Real* mNormals;^M

    Uint mVertexCount;


public:
   void getRenderOperation (RenderOpertation *op);
   void setVertices (...);
}

class Entity {

private:
    Real mModelMatrix[MATRIX_4x4_SIZE];
    Mesh *mesh;
    Texture *tex;
    ShaderProgram *mShaderProgram;
    
    
public:
   void translate();
   void rotate();
   void scale ();

   void getRenderOperation (RenderOpertation *op);

   void setMesh (Mesh *mesh);
   void setTexture (Texture *tex);

};

class World {

private:
   Entity *mEntities[MAX_ENTITY_COUNT];
    
   Real mWorldMatrix [MATRIX_4x4_SIZE];

public:
   Entity *createEntity ();
   void startRendering ();

}

}}}


void World::manulRender (RenderOperation*, Pass*, Viewport *p, 
        Matrix4& world, Matrix4& view, Matrix4& proj)
{
    renderer->_setViewPort();

    renderer->_beginFrame();

    renderer->_setWorldMatrix (world);
    renderer->_setViewMatrix (view);
    renderer->_setProjectionMatrix (proj);

    _setPass (pass);

    mAutoParamDataSource->setWorldMatrix (world);
    Camera dummyCam ();
    dummyCam.setCustomViewMatrix (view);
    dummyCam.setCustomProjMatrix (proj);
    mAutoParamDataSource->setCurrentCamera (&dummyCam);
    updateGpuProgramParamers (pass);

   
    renderer->_render(ro);
    
    renderer->_endFrame();
}


void World::startRendering ()
{



}



= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages