#summary 增加 TextureUnit 支持

=使用样例=

{{{

  Material *mat = MaterialManager::getInstance()->createMaterial();
  mat->setShader(shaderProgram);

  //mat->setTexture(tex);   /* old job*/  
  mMat->createTextureUnitState( “xue.jpg” );

}}}


=Material/TextureUnitState=

{{{

class Material
{
    vector<TextureUinit*> mTextureUnitStates;

    TextureUnitState* createTextureUnitState (name);
    TextureUnitState* getTextureUnitState (name);
        
}



class TextureUnitState 
{  
    PtrArray mTexturePtrs;
 
    void setTextureName (name);
}
 


=TextureManager/Texture=



class TextureManager 
{
 
    Map  mTexturePtrMap;

    size_t mMemoryBudget;  //in bytes
    size_t mMemoryUsage;   //in bytes
 

    void setMemoryBudget ();
    size_t getMemoryBudget();
    size_t getMemoryUsage ();
 


    Texture* create (name);  //create a new blank resource, but does not immediately load it
 
    Texture* getByName (name);  


    Texture* createOrRetrieve(name);   //getByName return NULL, then call create


    void remove(Texture* tex);   //unload and remove from list
 
    void remove (name);
 


    void removeAll();
 
    void removeUnreferencedResources();
 


    void unload (name);  //not removed, simply free up their memory
 

    void unloadAll();
 
    void reloadAll();
 
    unloadUnreferencedResource();
 
    reloadUnreferencedResource();
    


    bool resoureExist(name);
 

    Texture* prepare (name, );  //load images only, not opengl object
 

    Texture* load (name, numMipmaps, ...); //load into openg object.
 
    Texture* loadImage(name, Image &img, ...);
 
    Texture* loadRawData (name, width, height, format, ...); 

    Texture* createManal(name, w, h, d, rgba, ....);
 
}
 
class Texture
{
 
    GLuint mTextureID;
 
    vector <Image> mLoadedImages;
 

    void prepare();  //load image file to image
 
    void load();
 


    void unload();   // call freeInternalResources
 

    void loadImage(Image& img);     //generate gl texture object
 
    void loadRawData(w, h, format, data);     //generate gl texture object
 

    void createInternalResources ();  //generate gl texture object
    void freeInternalResources ();   //delete opengl texture

}

}}}


=World/Renderer= 


{{{

void World::renderOneObject ()
{
    for (all textureUnitState in Material) {
        mRenderer->setTextureUnitSettings (unit, pTex);
    }
}

void Renderer::_setTextureUnitSettings(texUnit, TextureUnitState* tl)
{
    tex = tl._getTexturePtr();
    _setTexture (texUnit, tex);
    _setTextureCoordSet(texUnit, tl.getTextureCoordSet());
    _setTextureFiltering(texUnit, 
            tl.getTexureFiltering(FT_MIN), 
            tl.getTexureFiltering(FT_MAG), 
            tl.getTexureFiltering(FT_MIP));
    _setTextureLayerAnisotropy(texUnit, tl.getTextureAnisotropy());
    _setTextureMipMapBias(texUnit, tl.getTextureMipmapsBias());
    _setTextureBlendMode(texUnit, tl.getColourBlendMode());
    _setTextureBlendMode(texUnit, tl.getAlphaBlendMode());
    _setTextureXXXX....



}

void Renderer::_setTexture (stage, enabled, texPtr)
{
    activateGLTextureUnit(stage);

    glBindTexture(texPtr);
    
}

}}}